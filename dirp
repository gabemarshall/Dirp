#!/usr/bin/env node

var argv = require("yargs").argv,
  http = require("./modules/http"),
  color = require("cli-color"),
  payloads = require("./modules/loadPayloads"),
  async = require("async"),
  fs = require("fs"),
  throttledQueue = require("throttled-queue"),
  Table = require('cli-table'),
  table = new Table(),
  rate = 50;

(dictionaryFile = "./default.txt"),
  (testString = ""),
  (debug = false),
  (jobs = 0),
  (jobsCount = 0),
  (test = false),
  (count = 0),
  (wordDir = require.resolve("cli-color"));

wordDir = wordDir.split("node_modules");
wordDir = wordDir[0];

var dictionaryFile = wordDir + "default.txt";

if (argv.rate) {
  rate = parseInt(argv.rate);
}

var throttle = throttledQueue(rate, 1000, true);

if (argv.help || argv.h || !argv.u) {
  console.log(color.green("\n--[Dirp Examples]--\n"));
  console.log("./dirp -u 'https://foo.bar/' --wordlist=/path/to/wordlist.txt");
  console.log("./dirp -u 'https://foo.bar/<INSERT>.jsp'");
  console.log(
    "./dirp -u 'https://foo.bar/' --cookie='sessionid=12345;foo=bar;'"
  );
  console.log("./dirp -u 'https://foo.bar/' --proxy='http://proxy.host:port'");
  console.log("           '--rate=50 (max number of requests per second - default 15)");
  console.log();
  process.exit(1);
} else if (argv.u) {
  if (argv.cookie) {
    http.cookies(argv.cookie);
  }

  if (argv.input || argv.wordlist) {
    if (argv.input) {
      dictionaryFile = argv.input;
    } else {
      dictionaryFile = argv.wordlist;
    }
  }

  if (argv.string) {
    testString = argv.string;
  }

  if (argv.debug) {
    debug = true;
  }

  fs.readFile(dictionaryFile, "utf8", function(err, data) {
    
    var payloadArray = data.toString().split("\n");
    
    const jobCount = payloadArray.length
    if (jobCount <= rate){
      console.log("woops")
      process.exit(0)
      rate = jobCount;
    }
    console.log(
      "\n[*] Using wordlist which contains %s checks\n\n",
      payloadArray.length
    );

    var arrays = [];

    var httpjob = function(args) {
      if (argv.u.match(/((<INSERT\s*?.*?>))/gi)) {
        var payload = argv.u.replace(/((<INSERT\s*?.*?>))/gi, args);
        http.get(argv.u, args, testString, debug, payload);
      } else {
        http.get(argv.u, args, testString, debug);
      }
    };
    
    for (var i = 0; i < payloadArray.length; i++) {
      throttle(function() {
        pay = payloadArray.splice(0, 1)
        httpjob(pay[0])
      });
    }
    setInterval(function(){
      
      count = jobCount - payloadArray.length;
      
      if ((count % rate) === 0) {
        var perCompleted = Math.round(((count / jobCount) * 100));
        perCompleted = perCompleted.toString();
        perCompleted += '% completed';
        if ((count % 1000) === 0){
          console.log("[*] "+perCompleted);
        }
      }
      if (payloadArray.length === 0){
        setTimeout(function(){
          process.exit(0)
        }, 1500)
      }
    }, 1000)
  });
}
process.on('exit', function() {
  console.log("\n\n%s checks completed", count);
  console.log(http.discoveries.length+" matches found\n");
  var resultsTable = new Table({
    head: ['Payload', 'Status', 'Length', 'Match'],
    style : {compact : true, 'padding-left' : 1}
  });
  for (i=0;i<http.discoveries.length;i++){
    resultsTable.push(
        [http.discoveries[i].url, http.discoveries[i].status, http.discoveries[i].len, http.discoveries[i].match]
      );
    //console.log(http.discoveries[i].url + " - [ "+http.discoveries[i].status+" ]")
  }
// table.push(
//     { 'Some key': 'Some value' }
//   , { 'Another key': 'Another value' }
// );

console.log(resultsTable.toString());  
});
